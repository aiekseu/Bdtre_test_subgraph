// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Contribution extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Contribution entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Contribution must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Contribution", id.toString(), this);
    }
  }

  static load(id: string): Contribution | null {
    return changetype<Contribution | null>(store.get("Contribution", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get referralAddress(): Bytes {
    let value = this.get("referralAddress");
    return value!.toBytes();
  }

  set referralAddress(value: Bytes) {
    this.set("referralAddress", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get toReferral(): BigInt {
    let value = this.get("toReferral");
    return value!.toBigInt();
  }

  set toReferral(value: BigInt) {
    this.set("toReferral", Value.fromBigInt(value));
  }

  get toFund(): BigInt {
    let value = this.get("toFund");
    return value!.toBigInt();
  }

  set toFund(value: BigInt) {
    this.set("toFund", Value.fromBigInt(value));
  }

  get toLottery(): BigInt {
    let value = this.get("toLottery");
    return value!.toBigInt();
  }

  set toLottery(value: BigInt) {
    this.set("toLottery", Value.fromBigInt(value));
  }

  get toMarketing(): BigInt {
    let value = this.get("toMarketing");
    return value!.toBigInt();
  }

  set toMarketing(value: BigInt) {
    this.set("toMarketing", Value.fromBigInt(value));
  }

  get toOwner(): BigInt {
    let value = this.get("toOwner");
    return value!.toBigInt();
  }

  set toOwner(value: BigInt) {
    this.set("toOwner", Value.fromBigInt(value));
  }

  get discount(): BigInt {
    let value = this.get("discount");
    return value!.toBigInt();
  }

  set discount(value: BigInt) {
    this.set("discount", Value.fromBigInt(value));
  }
}

export class Refund extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Refund entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Refund must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Refund", id.toString(), this);
    }
  }

  static load(id: string): Refund | null {
    return changetype<Refund | null>(store.get("Refund", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get bidNumber(): BigInt {
    let value = this.get("bidNumber");
    return value!.toBigInt();
  }

  set bidNumber(value: BigInt) {
    this.set("bidNumber", Value.fromBigInt(value));
  }

  get amountRefunded(): BigInt {
    let value = this.get("amountRefunded");
    return value!.toBigInt();
  }

  set amountRefunded(value: BigInt) {
    this.set("amountRefunded", Value.fromBigInt(value));
  }

  get fromBank(): BigInt {
    let value = this.get("fromBank");
    return value!.toBigInt();
  }

  set fromBank(value: BigInt) {
    this.set("fromBank", Value.fromBigInt(value));
  }
}

export class Lottery extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Lottery entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Lottery must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Lottery", id.toString(), this);
    }
  }

  static load(id: string): Lottery | null {
    return changetype<Lottery | null>(store.get("Lottery", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get number(): BigInt {
    let value = this.get("number");
    return value!.toBigInt();
  }

  set number(value: BigInt) {
    this.set("number", Value.fromBigInt(value));
  }

  get winner(): Bytes {
    let value = this.get("winner");
    return value!.toBytes();
  }

  set winner(value: Bytes) {
    this.set("winner", Value.fromBytes(value));
  }

  get bank(): BigInt {
    let value = this.get("bank");
    return value!.toBigInt();
  }

  set bank(value: BigInt) {
    this.set("bank", Value.fromBigInt(value));
  }
}

export class FutureLottery extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FutureLottery entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FutureLottery must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FutureLottery", id.toString(), this);
    }
  }

  static load(id: string): FutureLottery | null {
    return changetype<FutureLottery | null>(store.get("FutureLottery", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get participants(): Array<Bytes> {
    let value = this.get("participants");
    return value!.toBytesArray();
  }

  set participants(value: Array<Bytes>) {
    this.set("participants", Value.fromBytesArray(value));
  }

  get participantIds(): Array<Bytes> {
    let value = this.get("participantIds");
    return value!.toBytesArray();
  }

  set participantIds(value: Array<Bytes>) {
    this.set("participantIds", Value.fromBytesArray(value));
  }

  get bank(): BigInt {
    let value = this.get("bank");
    return value!.toBigInt();
  }

  set bank(value: BigInt) {
    this.set("bank", Value.fromBigInt(value));
  }
}

export class LotteryParticipant extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LotteryParticipant entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type LotteryParticipant must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LotteryParticipant", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): LotteryParticipant | null {
    return changetype<LotteryParticipant | null>(
      store.get("LotteryParticipant", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get contributed(): BigInt {
    let value = this.get("contributed");
    return value!.toBigInt();
  }

  set contributed(value: BigInt) {
    this.set("contributed", Value.fromBigInt(value));
  }

  get lottery(): string {
    let value = this.get("lottery");
    return value!.toString();
  }

  set lottery(value: string) {
    this.set("lottery", Value.fromString(value));
  }
}
